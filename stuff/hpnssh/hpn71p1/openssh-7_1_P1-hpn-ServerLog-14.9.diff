diff --git a/auth2.c b/auth2.c
index 7177962..4af53f0 100644
--- a/auth2.c
+++ b/auth2.c
@@ -50,6 +50,7 @@
 #include "dispatch.h"
 #include "pathnames.h"
 #include "buffer.h"
+#include "canohost.h"
 
 #ifdef GSSAPI
 #include "ssh-gss.h"
@@ -73,6 +74,8 @@ extern Authmethod method_hostbased;
 extern Authmethod method_gssapi;
 #endif
 
+static int log_flag = 0;
+
 Authmethod *authmethods[] = {
 	&method_none,
 	&method_pubkey,
@@ -224,6 +227,11 @@ input_userauth_request(int type, u_int32_t seq, void *ctxt)
 	service = packet_get_cstring(NULL);
 	method = packet_get_cstring(NULL);
 	debug("userauth-request for user %s service %s method %s", user, service, method);
+	if (!log_flag) {
+		logit("SSH: Server;Ltype: Authname;Remote: %s-%d;Name: %s",
+		      get_remote_ipaddr(), get_remote_port(), user);
+		log_flag = 1;
+	}
 	debug("attempt %d failures %d", authctxt->attempt, authctxt->failures);
 
 	if ((style = strchr(user, ':')) != NULL)
diff --git a/canohost.c b/canohost.c
index 223964e..db35f73 100644
--- a/canohost.c
+++ b/canohost.c
@@ -338,13 +338,13 @@ clear_cached_addr(void)
  */
 
 const char *
-get_remote_ipaddr(void)
+ssh_get_remote_ipaddr(struct ssh *ssh)
 {
 	/* Check whether we have cached the ipaddr. */
 	if (canonical_host_ip == NULL) {
-		if (packet_connection_is_on_socket()) {
+		if (ssh_packet_connection_is_on_socket(ssh)) {
 			canonical_host_ip =
-			    get_peer_ipaddr(packet_get_connection_in());
+			    get_peer_ipaddr(ssh_packet_get_connection_in(ssh));
 			if (canonical_host_ip == NULL)
 				cleanup_exit(255);
 		} else {
@@ -356,6 +356,12 @@ get_remote_ipaddr(void)
 }
 
 const char *
+get_remote_ipaddr(void)
+{
+  return ssh_get_remote_ipaddr(active_state);
+}
+
+const char *
 get_remote_name_or_ip(u_int utmp_len, int use_dns)
 {
 	static const char *remote = "";
@@ -410,17 +416,17 @@ get_sock_port(int sock, int local)
 /* Returns remote/local port number for the current connection. */
 
 static int
-get_port(int local)
+get_port(struct ssh *ssh, int local)
 {
 	/*
 	 * If the connection is not a socket, return 65535.  This is
 	 * intentionally chosen to be an unprivileged port number.
 	 */
-	if (!packet_connection_is_on_socket())
+	if (!ssh_packet_connection_is_on_socket(ssh))
 		return 65535;
 
 	/* Get socket and return the port number. */
-	return get_sock_port(packet_get_connection_in(), local);
+	return get_sock_port(ssh_packet_get_connection_in(ssh), local);
 }
 
 int
@@ -430,17 +436,23 @@ get_peer_port(int sock)
 }
 
 int
-get_remote_port(void)
+ssh_get_remote_port(struct ssh *ssh)
 {
 	/* Cache to avoid getpeername() on a dead connection */
 	if (cached_port == -1)
-		cached_port = get_port(0);
+		cached_port = get_port(ssh, 0);
 
 	return cached_port;
 }
 
 int
+get_remote_port(void)
+{
+	return ssh_get_remote_port(active_state);
+}
+
+int
 get_local_port(void)
 {
-	return get_port(1);
+	return get_port(active_state, 1);
 }
diff --git a/canohost.h b/canohost.h
index 4c8636f..4d60b27 100644
--- a/canohost.h
+++ b/canohost.h
@@ -12,8 +12,11 @@
  * called by a name other than "ssh" or "Secure Shell".
  */
 
+struct ssh;
+
 const char	*get_canonical_hostname(int);
 const char	*get_remote_ipaddr(void);
+const char	*ssh_get_remote_ipaddr(struct ssh *);
 const char	*get_remote_name_or_ip(u_int, int);
 
 char		*get_peer_ipaddr(int);
@@ -22,6 +25,7 @@ char		*get_local_ipaddr(int);
 char		*get_local_name(int);
 
 int		 get_remote_port(void);
+int		 ssh_get_remote_port(struct ssh *);
 int		 get_local_port(void);
 int		 get_sock_port(int, int);
 void		 clear_cached_addr(void);
diff --git a/channels.c b/channels.c
index a84b487..1c30bc5 100644
--- a/channels.c
+++ b/channels.c
@@ -2233,11 +2233,12 @@ channel_after_select(fd_set *readset, fd_set *writeset)
 
 
 /* If there is data to send to the connection, enqueue some of it now. */
-void
+int
 channel_output_poll(void)
 {
 	Channel *c;
 	u_int i, len;
+	int packet_length = 0;
 
 	for (i = 0; i < channels_alloc; i++) {
 		c = channels[i];
@@ -2285,7 +2286,7 @@ channel_output_poll(void)
 					packet_start(SSH2_MSG_CHANNEL_DATA);
 					packet_put_int(c->remote_id);
 					packet_put_string(data, dlen);
-					packet_send();
+					packet_length = packet_send();
 					c->remote_window -= dlen;
 					free(data);
 				}
@@ -2315,7 +2316,7 @@ channel_output_poll(void)
 				    SSH2_MSG_CHANNEL_DATA : SSH_MSG_CHANNEL_DATA);
 				packet_put_int(c->remote_id);
 				packet_put_string(buffer_ptr(&c->input), len);
-				packet_send();
+				packet_length = packet_send();
 				buffer_consume(&c->input, len);
 				c->remote_window -= len;
 			}
@@ -2350,12 +2351,13 @@ channel_output_poll(void)
 			packet_put_int(c->remote_id);
 			packet_put_int(SSH2_EXTENDED_DATA_STDERR);
 			packet_put_string(buffer_ptr(&c->extended), len);
-			packet_send();
+			packet_length = packet_send();
 			buffer_consume(&c->extended, len);
 			c->remote_window -= len;
 			debug2("channel %d: sent ext data %d", c->self, len);
 		}
 	}
+	return packet_length;
 }
 
 
diff --git a/channels.h b/channels.h
index 9d76c9d..d27c35c 100644
--- a/channels.h
+++ b/channels.h
@@ -247,7 +247,7 @@ int	 channel_input_status_confirm(int, u_int32_t, void *);
 void	 channel_prepare_select(fd_set **, fd_set **, int *, u_int*,
 	     time_t*, int);
 void     channel_after_select(fd_set *, fd_set *);
-void     channel_output_poll(void);
+int      channel_output_poll(void);
 
 int      channel_not_very_much_buffered_data(void);
 void     channel_close_all(void);
diff --git a/kex.c b/kex.c
index 5100c66..6be29d6 100644
--- a/kex.c
+++ b/kex.c
@@ -53,6 +53,7 @@
 
 #include "ssherr.h"
 #include "sshbuf.h"
+#include "canohost.h"
 #include "digest.h"
 
 #if OPENSSL_VERSION_NUMBER >= 0x00907000L
@@ -652,6 +653,7 @@ kex_choose_conf(struct ssh *ssh)
 	int nenc, nmac, ncomp;
 	u_int mode, ctos, need, dh_need, authlen;
 	int r, first_kex_follows;
+	int log_flag = 0;
 
 	if ((r = kex_buf2prop(kex->my, NULL, &my)) != 0 ||
 	    (r = kex_buf2prop(kex->peer, &first_kex_follows, &peer)) != 0)
@@ -714,6 +716,20 @@ kex_choose_conf(struct ssh *ssh)
 		    newkeys->enc.name,
 		    authlen == 0 ? newkeys->mac.name : "<implicit>",
 		    newkeys->comp.name);
+		/* client starts withctos = 0 && log flag = 0 and no log*/
+		/* 2nd client pass ctos=1 and flag = 1 so no log*/
+		/* server starts with ctos =1 && log_flag = 0 so log */
+		/* 2nd sever pass ctos = 1 && log flag = 1 so no log*/
+		/* -cjr*/
+		if (ctos && !log_flag) {
+			logit("SSH: Server;Ltype: Kex;Remote: %s-%d;Enc: %s;MAC: %s;Comp: %s",
+			    ssh_get_remote_ipaddr(ssh),
+			    ssh_get_remote_port(ssh),
+			    newkeys->enc.name,
+			    authlen == 0 ? newkeys->mac.name : "<implicit>",
+			    newkeys->comp.name);
+		}
+		log_flag = 1;
 	}
 	if ((r = choose_kex(kex, cprop[PROPOSAL_KEX_ALGS],
 	    sprop[PROPOSAL_KEX_ALGS])) != 0) {
diff --git a/opacket.c b/opacket.c
index b9160d5..e4cae07 100644
--- a/opacket.c
+++ b/opacket.c
@@ -108,13 +108,15 @@ ssh_packet_put_ecpoint(struct ssh *ssh, const EC_GROUP *curve,
 # endif
 #endif /* WITH_OPENSSL */
 
-void
+int
 ssh_packet_send(struct ssh *ssh)
 {
 	int r;
 
 	if ((r = sshpkt_send(ssh)) != 0)
 		fatal("%s: %s", __func__, ssh_err(r));
+
+	return r;
 }
 
 u_int
@@ -306,13 +308,15 @@ packet_write_wait(void)
 		sshpkt_fatal(active_state, __func__, r);
 }
 
-void
+int
 packet_write_poll(void)
 {
 	int r;
 
 	if ((r = ssh_packet_write_poll(active_state)) != 0)
 		sshpkt_fatal(active_state, __func__, r);
+
+	return r;
 }
 
 void
diff --git a/opacket.h b/opacket.h
index a0a60e5..188cb78 100644
--- a/opacket.h
+++ b/opacket.h
@@ -12,7 +12,7 @@ void     ssh_packet_put_ecpoint(struct ssh *, const EC_GROUP *, const EC_POINT *
 void     ssh_packet_put_string(struct ssh *, const void *buf, u_int len);
 void     ssh_packet_put_cstring(struct ssh *, const char *str);
 void     ssh_packet_put_raw(struct ssh *, const void *buf, u_int len);
-void     ssh_packet_send(struct ssh *);
+int      ssh_packet_send(struct ssh *);
 
 u_int	 ssh_packet_get_char(struct ssh *);
 u_int	 ssh_packet_get_int(struct ssh *);
@@ -46,7 +46,7 @@ int	 packet_read_seqnr(u_int32_t *);
 int	 packet_read_poll_seqnr(u_int32_t *);
 void	 packet_process_incoming(const char *buf, u_int len);
 void	 packet_write_wait(void);
-void	 packet_write_poll(void);
+int	 packet_write_poll(void);
 void	 packet_read_expect(int expected_type);
 #define packet_set_timeout(timeout, count) \
 	ssh_packet_set_timeout(active_state, (timeout), (count))
diff --git a/sandbox-seccomp-filter.c b/sandbox-seccomp-filter.c
index 2462bcc..030a9e2 100644
--- a/sandbox-seccomp-filter.c
+++ b/sandbox-seccomp-filter.c
@@ -141,6 +141,9 @@ static const struct sock_filter preauth_insns[] = {
 #ifdef __NR_exit_group
 	SC_ALLOW(exit_group),
 #endif
+#ifdef __NR_getpeername /* not defined on archs that go via socketcall(2) */
+	SC_ALLOW(getpeername),
+#endif
 #ifdef __NR_getpgid
 	SC_ALLOW(getpgid),
 #endif
@@ -189,6 +192,9 @@ static const struct sock_filter preauth_insns[] = {
 #ifdef __NR_sigprocmask
 	SC_ALLOW(sigprocmask),
 #endif
+#ifdef __NR_socketcall
+	SC_ALLOW(socketcall),
+#endif
 #ifdef __NR_time
 	SC_ALLOW(time),
 #endif
diff --git a/serverloop.c b/serverloop.c
index 306ac36..6912497 100644
--- a/serverloop.c
+++ b/serverloop.c
@@ -94,10 +94,10 @@ static int fdin;		/* Descriptor for stdin (for writing) */
 static int fdout;		/* Descriptor for stdout (for reading);
 				   May be same number as fdin. */
 static int fderr;		/* Descriptor for stderr.  May be -1. */
-static long stdin_bytes = 0;	/* Number of bytes written to stdin. */
-static long stdout_bytes = 0;	/* Number of stdout bytes sent to client. */
-static long stderr_bytes = 0;	/* Number of stderr bytes sent to client. */
-static long fdout_bytes = 0;	/* Number of stdout bytes read from program. */
+static u_long stdin_bytes = 0;	/* Number of bytes written to stdin. */
+static u_long stdout_bytes = 0;	/* Number of stdout bytes sent to client. */
+static u_long stderr_bytes = 0;	/* Number of stderr bytes sent to client. */
+static u_long fdout_bytes = 0;	/* Number of stdout bytes read from program. */
 static int stdin_eof = 0;	/* EOF message received from client. */
 static int fdout_eof = 0;	/* EOF encountered reading from fdout. */
 static int fderr_eof = 0;	/* EOF encountered readung from fderr. */
@@ -122,6 +122,20 @@ static volatile sig_atomic_t received_sigterm = 0;
 static void server_init_dispatch(void);
 
 /*
+ * Returns current time in seconds from Jan 1, 1970 with the maximum
+ * available resolution.
+ */
+
+static double
+get_current_time(void)
+{
+	struct timeval tv;
+	gettimeofday(&tv, NULL);
+	return (double) tv.tv_sec + (double) tv.tv_usec / 1000000.0;
+}
+
+
+/*
  * we write to this pipe if a SIGCHLD is caught in order to avoid
  * the race between select() and child_terminated
  */
@@ -421,6 +435,7 @@ process_input(fd_set *readset)
 		} else {
 			/* Buffer any received data. */
 			packet_process_incoming(buf, len);
+			fdout_bytes += len;
 		}
 	}
 	if (compat20)
@@ -443,6 +458,7 @@ process_input(fd_set *readset)
 		} else {
 			buffer_append(&stdout_buffer, buf, len);
 			fdout_bytes += len;
+			debug ("FD out now: %ld", fdout_bytes);
 		}
 	}
 	/* Read and buffer any available stderr data from the program. */
@@ -510,7 +526,7 @@ process_output(fd_set *writeset)
 	}
 	/* Send any buffered packet data to the client. */
 	if (FD_ISSET(connection_out, writeset))
-		packet_write_poll();
+		stdin_bytes += packet_write_poll();
 }
 
 /*
@@ -824,11 +840,13 @@ void
 server_loop2(Authctxt *authctxt)
 {
 	fd_set *readset = NULL, *writeset = NULL;
+	double start_time, total_time;
 	int rekeying = 0, max_fd;
 	u_int nalloc = 0;
 	u_int64_t rekey_timeout_ms = 0;
 
 	debug("Entering interactive session for SSH2.");
+	start_time = get_current_time();
 
 	mysignal(SIGCHLD, sigchld_handler);
 	child_terminated = 0;
@@ -893,6 +911,11 @@ server_loop2(Authctxt *authctxt)
 
 	/* free remaining sessions, e.g. remove wtmp entries */
 	session_destroy_all(NULL);
+	total_time = get_current_time() - start_time;
+	logit("SSH: Server;LType: Throughput;Remote: %s-%d;IN: %lu;OUT: %lu;Duration: %.1f;tPut_in: %.1f;tPut_out: %.1f",
+	      get_remote_ipaddr(), get_remote_port(),
+	      stdin_bytes, fdout_bytes, total_time, stdin_bytes / total_time,
+	      fdout_bytes / total_time);
 }
 
 static int
diff --git a/sshd.c b/sshd.c
index 65ef7e8..a66e73f 100644
--- a/sshd.c
+++ b/sshd.c
@@ -485,6 +485,9 @@ sshd_exchange_identification(int sock_in, int sock_out)
 	}
 	debug("Client protocol version %d.%d; client software version %.100s",
 	    remote_major, remote_minor, remote_version);
+	logit("SSH: Server;Ltype: Version;Remote: %s-%d;Protocol: %d.%d;Client: %.100s",
+	      get_remote_ipaddr(), get_remote_port(),
+	    remote_major, remote_minor, remote_version);
 
 	active_state->compat = compat_datafellows(remote_version);
 
